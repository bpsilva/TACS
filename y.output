Terminals unused in grammar

   NAT_FUNC
   NAT_VEC
   NAT_ESC
   NAT_PTR
   NAT_PTR_ADDR
   TOKEN_ERROR
   COUNT_DEF_ERROR
   ERROR
   SYMBOL_LIT_FLOATING


State 123 conflicts: 12 shift/reduce
State 138 conflicts: 1 shift/reduce


Grammar

    0 $accept: init SYMBOL_UNDEFINED

    1 init: program

    2 program: %empty
    3        | type SYMBOL_IDENTIFIER func_body program
    4        | type SYMBOL_IDENTIFIER ':' value ';' program
    5        | type '$' SYMBOL_IDENTIFIER ':' value ';' program
    6        | type SYMBOL_IDENTIFIER '[' SYMBOL_LIT_INTEGER ']' ';' program
    7        | type SYMBOL_IDENTIFIER index_init program

    8 index_init: '[' SYMBOL_LIT_INTEGER ']' ':' symbol_lit_seq ';'

    9 func_body: '(' param ')' local_var_def_list command_list

   10 command_list: '{' commands '}'

   11 commands: %empty
   12         | simple_command ';' commands

   13 simple_command: %empty
   14               | atrib
   15               | flux_control
   16               | KW_INPUT SYMBOL_IDENTIFIER
   17               | KW_OUTPUT expression output_rest
   18               | KW_RETURN expression

   19 atrib: '+' '+' SYMBOL_IDENTIFIER
   20      | SYMBOL_IDENTIFIER '+' '+'
   21      | SYMBOL_IDENTIFIER '=' expression
   22      | SYMBOL_IDENTIFIER '[' expression ']' '=' expression

   23 expression: '(' expression ')'
   24           | expression op expression
   25           | SYMBOL_IDENTIFIER '[' expression ']'
   26           | SYMBOL_IDENTIFIER
   27           | value
   28           | SYMBOL_IDENTIFIER '(' arg ')'
   29           | '&' SYMBOL_IDENTIFIER
   30           | '$' SYMBOL_IDENTIFIER

   31 op: '+'
   32   | '-'
   33   | '*'
   34   | '/'
   35   | '>'
   36   | '<'
   37   | OPERATOR_EQ
   38   | OPERATOR_GE
   39   | OPERATOR_LE
   40   | OPERATOR_OR
   41   | OPERATOR_AND
   42   | OPERATOR_NE

   43 arg: %empty
   44    | value ',' arg
   45    | SYMBOL_IDENTIFIER ',' arg
   46    | SYMBOL_IDENTIFIER
   47    | value

   48 value: SYMBOL_LIT_INTEGER
   49      | SYMBOL_LIT_FALSE
   50      | SYMBOL_LIT_TRUE
   51      | SYMBOL_LIT_CHAR
   52      | SYMBOL_LIT_STRING

   53 output_rest: %empty
   54            | ',' expression output_rest

   55 flux_control: KW_IF '(' expression ')' then
   56             | KW_LOOP '(' simple_command ';' expression ';' simple_command ')' command_list

   57 then: KW_THEN option else

   58 else: %empty
   59     | KW_ELSE option

   60 option: command_list
   61       | simple_command

   62 local_var_def_list: %empty
   63                   | local_var_def local_var_def_list

   64 local_var_def: type SYMBOL_IDENTIFIER ':' value ';'
   65              | type '$' SYMBOL_IDENTIFIER ':' value ';'

   66 param: %empty
   67      | type SYMBOL_IDENTIFIER paramseq

   68 paramseq: %empty
   69         | ',' type SYMBOL_IDENTIFIER paramseq

   70 symbol_lit_seq: value
   71               | value symbol_lit_seq

   72 type: KW_WORD
   73     | KW_BOOL
   74     | KW_BYTE


Terminals, with rules where they appear

SYMBOL_UNDEFINED (0) 0
SYMBOL_LIT_INTEGER (1) 6 8 48
SYMBOL_LIT_FLOATING (2)
SYMBOL_LIT_TRUE (3) 50
SYMBOL_LIT_FALSE (4) 49
SYMBOL_LIT_CHAR (5) 51
SYMBOL_LIT_STRING (6) 52
SYMBOL_IDENTIFIER (7) 3 4 5 6 7 16 19 20 21 22 25 26 28 29 30 45 46
    64 65 67 69
'$' (36) 5 30 65
'&' (38) 29
'(' (40) 9 23 28 55 56
')' (41) 9 23 28 55 56
'*' (42) 33
'+' (43) 19 20 31
',' (44) 44 45 54 69
'-' (45) 32
'/' (47) 34
':' (58) 4 5 8 64 65
';' (59) 4 5 6 8 12 56 64 65
'<' (60) 36
'=' (61) 21 22
'>' (62) 35
'[' (91) 6 8 22 25
']' (93) 6 8 22 25
'{' (123) 10
'}' (125) 10
error (256)
KW_WORD (500) 72
KW_BOOL (501) 73
KW_BYTE (502) 74
KW_IF (503) 55
KW_THEN (504) 57
KW_ELSE (505) 59
KW_LOOP (506) 56
KW_INPUT (507) 16
KW_RETURN (508) 18
KW_OUTPUT (509) 17
OPERATOR_LE (510) 39
OPERATOR_GE (511) 38
OPERATOR_EQ (512) 37
OPERATOR_NE (513) 42
OPERATOR_AND (514) 41
OPERATOR_OR (515) 40
NAT_FUNC (516)
NAT_VEC (517)
NAT_ESC (518)
NAT_PTR (519)
NAT_PTR_ADDR (520)
COUNT_DEF_ERROR (1500)
ERROR (1501)
TOKEN_ERROR (1503)


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
init (53)
    on left: 1, on right: 0
program (54)
    on left: 2 3 4 5 6 7, on right: 1 3 4 5 6 7
index_init (55)
    on left: 8, on right: 7
func_body (56)
    on left: 9, on right: 3
command_list (57)
    on left: 10, on right: 9 56 60
commands (58)
    on left: 11 12, on right: 10 12
simple_command (59)
    on left: 13 14 15 16 17 18, on right: 12 56 61
atrib (60)
    on left: 19 20 21 22, on right: 14
expression (61)
    on left: 23 24 25 26 27 28 29 30, on right: 17 18 21 22 23 24 25
    54 55 56
op (62)
    on left: 31 32 33 34 35 36 37 38 39 40 41 42, on right: 24
arg (63)
    on left: 43 44 45 46 47, on right: 28 44 45
value (64)
    on left: 48 49 50 51 52, on right: 4 5 27 44 47 64 65 70 71
output_rest (65)
    on left: 53 54, on right: 17 54
flux_control (66)
    on left: 55 56, on right: 15
then (67)
    on left: 57, on right: 55
else (68)
    on left: 58 59, on right: 57
option (69)
    on left: 60 61, on right: 57 59
local_var_def_list (70)
    on left: 62 63, on right: 9 63
local_var_def (71)
    on left: 64 65, on right: 63
param (72)
    on left: 66 67, on right: 9
paramseq (73)
    on left: 68 69, on right: 67 69
symbol_lit_seq (74)
    on left: 70 71, on right: 8 71
type (75)
    on left: 72 73 74, on right: 3 4 5 6 7 64 65 67 69


State 0

    0 $accept: . init SYMBOL_UNDEFINED

    KW_WORD  shift, and go to state 1
    KW_BOOL  shift, and go to state 2
    KW_BYTE  shift, and go to state 3

    $default  reduce using rule 2 (program)

    init     go to state 4
    program  go to state 5
    type     go to state 6


State 1

   72 type: KW_WORD .

    $default  reduce using rule 72 (type)


State 2

   73 type: KW_BOOL .

    $default  reduce using rule 73 (type)


State 3

   74 type: KW_BYTE .

    $default  reduce using rule 74 (type)


State 4

    0 $accept: init . SYMBOL_UNDEFINED

    SYMBOL_UNDEFINED  shift, and go to state 7


State 5

    1 init: program .

    $default  reduce using rule 1 (init)


State 6

    3 program: type . SYMBOL_IDENTIFIER func_body program
    4        | type . SYMBOL_IDENTIFIER ':' value ';' program
    5        | type . '$' SYMBOL_IDENTIFIER ':' value ';' program
    6        | type . SYMBOL_IDENTIFIER '[' SYMBOL_LIT_INTEGER ']' ';' program
    7        | type . SYMBOL_IDENTIFIER index_init program

    SYMBOL_IDENTIFIER  shift, and go to state 8
    '$'                shift, and go to state 9


State 7

    0 $accept: init SYMBOL_UNDEFINED .

    $default  accept


State 8

    3 program: type SYMBOL_IDENTIFIER . func_body program
    4        | type SYMBOL_IDENTIFIER . ':' value ';' program
    6        | type SYMBOL_IDENTIFIER . '[' SYMBOL_LIT_INTEGER ']' ';' program
    7        | type SYMBOL_IDENTIFIER . index_init program

    ':'  shift, and go to state 10
    '['  shift, and go to state 11
    '('  shift, and go to state 12

    index_init  go to state 13
    func_body   go to state 14


State 9

    5 program: type '$' . SYMBOL_IDENTIFIER ':' value ';' program

    SYMBOL_IDENTIFIER  shift, and go to state 15


State 10

    4 program: type SYMBOL_IDENTIFIER ':' . value ';' program

    SYMBOL_LIT_INTEGER  shift, and go to state 16
    SYMBOL_LIT_TRUE     shift, and go to state 17
    SYMBOL_LIT_FALSE    shift, and go to state 18
    SYMBOL_LIT_CHAR     shift, and go to state 19
    SYMBOL_LIT_STRING   shift, and go to state 20

    value  go to state 21


State 11

    6 program: type SYMBOL_IDENTIFIER '[' . SYMBOL_LIT_INTEGER ']' ';' program
    8 index_init: '[' . SYMBOL_LIT_INTEGER ']' ':' symbol_lit_seq ';'

    SYMBOL_LIT_INTEGER  shift, and go to state 22


State 12

    9 func_body: '(' . param ')' local_var_def_list command_list

    KW_WORD  shift, and go to state 1
    KW_BOOL  shift, and go to state 2
    KW_BYTE  shift, and go to state 3

    $default  reduce using rule 66 (param)

    param  go to state 23
    type   go to state 24


State 13

    7 program: type SYMBOL_IDENTIFIER index_init . program

    KW_WORD  shift, and go to state 1
    KW_BOOL  shift, and go to state 2
    KW_BYTE  shift, and go to state 3

    $default  reduce using rule 2 (program)

    program  go to state 25
    type     go to state 6


State 14

    3 program: type SYMBOL_IDENTIFIER func_body . program

    KW_WORD  shift, and go to state 1
    KW_BOOL  shift, and go to state 2
    KW_BYTE  shift, and go to state 3

    $default  reduce using rule 2 (program)

    program  go to state 26
    type     go to state 6


State 15

    5 program: type '$' SYMBOL_IDENTIFIER . ':' value ';' program

    ':'  shift, and go to state 27


State 16

   48 value: SYMBOL_LIT_INTEGER .

    $default  reduce using rule 48 (value)


State 17

   50 value: SYMBOL_LIT_TRUE .

    $default  reduce using rule 50 (value)


State 18

   49 value: SYMBOL_LIT_FALSE .

    $default  reduce using rule 49 (value)


State 19

   51 value: SYMBOL_LIT_CHAR .

    $default  reduce using rule 51 (value)


State 20

   52 value: SYMBOL_LIT_STRING .

    $default  reduce using rule 52 (value)


State 21

    4 program: type SYMBOL_IDENTIFIER ':' value . ';' program

    ';'  shift, and go to state 28


State 22

    6 program: type SYMBOL_IDENTIFIER '[' SYMBOL_LIT_INTEGER . ']' ';' program
    8 index_init: '[' SYMBOL_LIT_INTEGER . ']' ':' symbol_lit_seq ';'

    ']'  shift, and go to state 29


State 23

    9 func_body: '(' param . ')' local_var_def_list command_list

    ')'  shift, and go to state 30


State 24

   67 param: type . SYMBOL_IDENTIFIER paramseq

    SYMBOL_IDENTIFIER  shift, and go to state 31


State 25

    7 program: type SYMBOL_IDENTIFIER index_init program .

    $default  reduce using rule 7 (program)


State 26

    3 program: type SYMBOL_IDENTIFIER func_body program .

    $default  reduce using rule 3 (program)


State 27

    5 program: type '$' SYMBOL_IDENTIFIER ':' . value ';' program

    SYMBOL_LIT_INTEGER  shift, and go to state 16
    SYMBOL_LIT_TRUE     shift, and go to state 17
    SYMBOL_LIT_FALSE    shift, and go to state 18
    SYMBOL_LIT_CHAR     shift, and go to state 19
    SYMBOL_LIT_STRING   shift, and go to state 20

    value  go to state 32


State 28

    4 program: type SYMBOL_IDENTIFIER ':' value ';' . program

    KW_WORD  shift, and go to state 1
    KW_BOOL  shift, and go to state 2
    KW_BYTE  shift, and go to state 3

    $default  reduce using rule 2 (program)

    program  go to state 33
    type     go to state 6


State 29

    6 program: type SYMBOL_IDENTIFIER '[' SYMBOL_LIT_INTEGER ']' . ';' program
    8 index_init: '[' SYMBOL_LIT_INTEGER ']' . ':' symbol_lit_seq ';'

    ':'  shift, and go to state 34
    ';'  shift, and go to state 35


State 30

    9 func_body: '(' param ')' . local_var_def_list command_list

    KW_WORD  shift, and go to state 1
    KW_BOOL  shift, and go to state 2
    KW_BYTE  shift, and go to state 3

    $default  reduce using rule 62 (local_var_def_list)

    local_var_def_list  go to state 36
    local_var_def       go to state 37
    type                go to state 38


State 31

   67 param: type SYMBOL_IDENTIFIER . paramseq

    ','  shift, and go to state 39

    $default  reduce using rule 68 (paramseq)

    paramseq  go to state 40


State 32

    5 program: type '$' SYMBOL_IDENTIFIER ':' value . ';' program

    ';'  shift, and go to state 41


State 33

    4 program: type SYMBOL_IDENTIFIER ':' value ';' program .

    $default  reduce using rule 4 (program)


State 34

    8 index_init: '[' SYMBOL_LIT_INTEGER ']' ':' . symbol_lit_seq ';'

    SYMBOL_LIT_INTEGER  shift, and go to state 16
    SYMBOL_LIT_TRUE     shift, and go to state 17
    SYMBOL_LIT_FALSE    shift, and go to state 18
    SYMBOL_LIT_CHAR     shift, and go to state 19
    SYMBOL_LIT_STRING   shift, and go to state 20

    value           go to state 42
    symbol_lit_seq  go to state 43


State 35

    6 program: type SYMBOL_IDENTIFIER '[' SYMBOL_LIT_INTEGER ']' ';' . program

    KW_WORD  shift, and go to state 1
    KW_BOOL  shift, and go to state 2
    KW_BYTE  shift, and go to state 3

    $default  reduce using rule 2 (program)

    program  go to state 44
    type     go to state 6


State 36

    9 func_body: '(' param ')' local_var_def_list . command_list

    '{'  shift, and go to state 45

    command_list  go to state 46


State 37

   63 local_var_def_list: local_var_def . local_var_def_list

    KW_WORD  shift, and go to state 1
    KW_BOOL  shift, and go to state 2
    KW_BYTE  shift, and go to state 3

    $default  reduce using rule 62 (local_var_def_list)

    local_var_def_list  go to state 47
    local_var_def       go to state 37
    type                go to state 38


State 38

   64 local_var_def: type . SYMBOL_IDENTIFIER ':' value ';'
   65              | type . '$' SYMBOL_IDENTIFIER ':' value ';'

    SYMBOL_IDENTIFIER  shift, and go to state 48
    '$'                shift, and go to state 49


State 39

   69 paramseq: ',' . type SYMBOL_IDENTIFIER paramseq

    KW_WORD  shift, and go to state 1
    KW_BOOL  shift, and go to state 2
    KW_BYTE  shift, and go to state 3

    type  go to state 50


State 40

   67 param: type SYMBOL_IDENTIFIER paramseq .

    $default  reduce using rule 67 (param)


State 41

    5 program: type '$' SYMBOL_IDENTIFIER ':' value ';' . program

    KW_WORD  shift, and go to state 1
    KW_BOOL  shift, and go to state 2
    KW_BYTE  shift, and go to state 3

    $default  reduce using rule 2 (program)

    program  go to state 51
    type     go to state 6


State 42

   70 symbol_lit_seq: value .
   71               | value . symbol_lit_seq

    SYMBOL_LIT_INTEGER  shift, and go to state 16
    SYMBOL_LIT_TRUE     shift, and go to state 17
    SYMBOL_LIT_FALSE    shift, and go to state 18
    SYMBOL_LIT_CHAR     shift, and go to state 19
    SYMBOL_LIT_STRING   shift, and go to state 20

    $default  reduce using rule 70 (symbol_lit_seq)

    value           go to state 42
    symbol_lit_seq  go to state 52


State 43

    8 index_init: '[' SYMBOL_LIT_INTEGER ']' ':' symbol_lit_seq . ';'

    ';'  shift, and go to state 53


State 44

    6 program: type SYMBOL_IDENTIFIER '[' SYMBOL_LIT_INTEGER ']' ';' program .

    $default  reduce using rule 6 (program)


State 45

   10 command_list: '{' . commands '}'

    KW_IF              shift, and go to state 54
    KW_LOOP            shift, and go to state 55
    KW_INPUT           shift, and go to state 56
    KW_RETURN          shift, and go to state 57
    KW_OUTPUT          shift, and go to state 58
    SYMBOL_IDENTIFIER  shift, and go to state 59
    '+'                shift, and go to state 60

    ';'       reduce using rule 13 (simple_command)
    $default  reduce using rule 11 (commands)

    commands        go to state 61
    simple_command  go to state 62
    atrib           go to state 63
    flux_control    go to state 64


State 46

    9 func_body: '(' param ')' local_var_def_list command_list .

    $default  reduce using rule 9 (func_body)


State 47

   63 local_var_def_list: local_var_def local_var_def_list .

    $default  reduce using rule 63 (local_var_def_list)


State 48

   64 local_var_def: type SYMBOL_IDENTIFIER . ':' value ';'

    ':'  shift, and go to state 65


State 49

   65 local_var_def: type '$' . SYMBOL_IDENTIFIER ':' value ';'

    SYMBOL_IDENTIFIER  shift, and go to state 66


State 50

   69 paramseq: ',' type . SYMBOL_IDENTIFIER paramseq

    SYMBOL_IDENTIFIER  shift, and go to state 67


State 51

    5 program: type '$' SYMBOL_IDENTIFIER ':' value ';' program .

    $default  reduce using rule 5 (program)


State 52

   71 symbol_lit_seq: value symbol_lit_seq .

    $default  reduce using rule 71 (symbol_lit_seq)


State 53

    8 index_init: '[' SYMBOL_LIT_INTEGER ']' ':' symbol_lit_seq ';' .

    $default  reduce using rule 8 (index_init)


State 54

   55 flux_control: KW_IF . '(' expression ')' then

    '('  shift, and go to state 68


State 55

   56 flux_control: KW_LOOP . '(' simple_command ';' expression ';' simple_command ')' command_list

    '('  shift, and go to state 69


State 56

   16 simple_command: KW_INPUT . SYMBOL_IDENTIFIER

    SYMBOL_IDENTIFIER  shift, and go to state 70


State 57

   18 simple_command: KW_RETURN . expression

    SYMBOL_LIT_INTEGER  shift, and go to state 16
    SYMBOL_LIT_TRUE     shift, and go to state 17
    SYMBOL_LIT_FALSE    shift, and go to state 18
    SYMBOL_LIT_CHAR     shift, and go to state 19
    SYMBOL_LIT_STRING   shift, and go to state 20
    SYMBOL_IDENTIFIER   shift, and go to state 71
    '$'                 shift, and go to state 72
    '('                 shift, and go to state 73
    '&'                 shift, and go to state 74

    expression  go to state 75
    value       go to state 76


State 58

   17 simple_command: KW_OUTPUT . expression output_rest

    SYMBOL_LIT_INTEGER  shift, and go to state 16
    SYMBOL_LIT_TRUE     shift, and go to state 17
    SYMBOL_LIT_FALSE    shift, and go to state 18
    SYMBOL_LIT_CHAR     shift, and go to state 19
    SYMBOL_LIT_STRING   shift, and go to state 20
    SYMBOL_IDENTIFIER   shift, and go to state 71
    '$'                 shift, and go to state 72
    '('                 shift, and go to state 73
    '&'                 shift, and go to state 74

    expression  go to state 77
    value       go to state 76


State 59

   20 atrib: SYMBOL_IDENTIFIER . '+' '+'
   21      | SYMBOL_IDENTIFIER . '=' expression
   22      | SYMBOL_IDENTIFIER . '[' expression ']' '=' expression

    '+'  shift, and go to state 78
    '['  shift, and go to state 79
    '='  shift, and go to state 80


State 60

   19 atrib: '+' . '+' SYMBOL_IDENTIFIER

    '+'  shift, and go to state 81


State 61

   10 command_list: '{' commands . '}'

    '}'  shift, and go to state 82


State 62

   12 commands: simple_command . ';' commands

    ';'  shift, and go to state 83


State 63

   14 simple_command: atrib .

    $default  reduce using rule 14 (simple_command)


State 64

   15 simple_command: flux_control .

    $default  reduce using rule 15 (simple_command)


State 65

   64 local_var_def: type SYMBOL_IDENTIFIER ':' . value ';'

    SYMBOL_LIT_INTEGER  shift, and go to state 16
    SYMBOL_LIT_TRUE     shift, and go to state 17
    SYMBOL_LIT_FALSE    shift, and go to state 18
    SYMBOL_LIT_CHAR     shift, and go to state 19
    SYMBOL_LIT_STRING   shift, and go to state 20

    value  go to state 84


State 66

   65 local_var_def: type '$' SYMBOL_IDENTIFIER . ':' value ';'

    ':'  shift, and go to state 85


State 67

   69 paramseq: ',' type SYMBOL_IDENTIFIER . paramseq

    ','  shift, and go to state 39

    $default  reduce using rule 68 (paramseq)

    paramseq  go to state 86


State 68

   55 flux_control: KW_IF '(' . expression ')' then

    SYMBOL_LIT_INTEGER  shift, and go to state 16
    SYMBOL_LIT_TRUE     shift, and go to state 17
    SYMBOL_LIT_FALSE    shift, and go to state 18
    SYMBOL_LIT_CHAR     shift, and go to state 19
    SYMBOL_LIT_STRING   shift, and go to state 20
    SYMBOL_IDENTIFIER   shift, and go to state 71
    '$'                 shift, and go to state 72
    '('                 shift, and go to state 73
    '&'                 shift, and go to state 74

    expression  go to state 87
    value       go to state 76


State 69

   56 flux_control: KW_LOOP '(' . simple_command ';' expression ';' simple_command ')' command_list

    KW_IF              shift, and go to state 54
    KW_LOOP            shift, and go to state 55
    KW_INPUT           shift, and go to state 56
    KW_RETURN          shift, and go to state 57
    KW_OUTPUT          shift, and go to state 58
    SYMBOL_IDENTIFIER  shift, and go to state 59
    '+'                shift, and go to state 60

    $default  reduce using rule 13 (simple_command)

    simple_command  go to state 88
    atrib           go to state 63
    flux_control    go to state 64


State 70

   16 simple_command: KW_INPUT SYMBOL_IDENTIFIER .

    $default  reduce using rule 16 (simple_command)


State 71

   25 expression: SYMBOL_IDENTIFIER . '[' expression ']'
   26           | SYMBOL_IDENTIFIER .
   28           | SYMBOL_IDENTIFIER . '(' arg ')'

    '['  shift, and go to state 89
    '('  shift, and go to state 90

    $default  reduce using rule 26 (expression)


State 72

   30 expression: '$' . SYMBOL_IDENTIFIER

    SYMBOL_IDENTIFIER  shift, and go to state 91


State 73

   23 expression: '(' . expression ')'

    SYMBOL_LIT_INTEGER  shift, and go to state 16
    SYMBOL_LIT_TRUE     shift, and go to state 17
    SYMBOL_LIT_FALSE    shift, and go to state 18
    SYMBOL_LIT_CHAR     shift, and go to state 19
    SYMBOL_LIT_STRING   shift, and go to state 20
    SYMBOL_IDENTIFIER   shift, and go to state 71
    '$'                 shift, and go to state 72
    '('                 shift, and go to state 73
    '&'                 shift, and go to state 74

    expression  go to state 92
    value       go to state 76


State 74

   29 expression: '&' . SYMBOL_IDENTIFIER

    SYMBOL_IDENTIFIER  shift, and go to state 93


State 75

   18 simple_command: KW_RETURN expression .
   24 expression: expression . op expression

    OPERATOR_LE   shift, and go to state 94
    OPERATOR_GE   shift, and go to state 95
    OPERATOR_EQ   shift, and go to state 96
    OPERATOR_NE   shift, and go to state 97
    OPERATOR_AND  shift, and go to state 98
    OPERATOR_OR   shift, and go to state 99
    '+'           shift, and go to state 100
    '-'           shift, and go to state 101
    '/'           shift, and go to state 102
    '*'           shift, and go to state 103
    '>'           shift, and go to state 104
    '<'           shift, and go to state 105

    $default  reduce using rule 18 (simple_command)

    op  go to state 106


State 76

   27 expression: value .

    $default  reduce using rule 27 (expression)


State 77

   17 simple_command: KW_OUTPUT expression . output_rest
   24 expression: expression . op expression

    OPERATOR_LE   shift, and go to state 94
    OPERATOR_GE   shift, and go to state 95
    OPERATOR_EQ   shift, and go to state 96
    OPERATOR_NE   shift, and go to state 97
    OPERATOR_AND  shift, and go to state 98
    OPERATOR_OR   shift, and go to state 99
    '+'           shift, and go to state 100
    '-'           shift, and go to state 101
    '/'           shift, and go to state 102
    '*'           shift, and go to state 103
    '>'           shift, and go to state 104
    '<'           shift, and go to state 105
    ','           shift, and go to state 107

    $default  reduce using rule 53 (output_rest)

    op           go to state 106
    output_rest  go to state 108


State 78

   20 atrib: SYMBOL_IDENTIFIER '+' . '+'

    '+'  shift, and go to state 109


State 79

   22 atrib: SYMBOL_IDENTIFIER '[' . expression ']' '=' expression

    SYMBOL_LIT_INTEGER  shift, and go to state 16
    SYMBOL_LIT_TRUE     shift, and go to state 17
    SYMBOL_LIT_FALSE    shift, and go to state 18
    SYMBOL_LIT_CHAR     shift, and go to state 19
    SYMBOL_LIT_STRING   shift, and go to state 20
    SYMBOL_IDENTIFIER   shift, and go to state 71
    '$'                 shift, and go to state 72
    '('                 shift, and go to state 73
    '&'                 shift, and go to state 74

    expression  go to state 110
    value       go to state 76


State 80

   21 atrib: SYMBOL_IDENTIFIER '=' . expression

    SYMBOL_LIT_INTEGER  shift, and go to state 16
    SYMBOL_LIT_TRUE     shift, and go to state 17
    SYMBOL_LIT_FALSE    shift, and go to state 18
    SYMBOL_LIT_CHAR     shift, and go to state 19
    SYMBOL_LIT_STRING   shift, and go to state 20
    SYMBOL_IDENTIFIER   shift, and go to state 71
    '$'                 shift, and go to state 72
    '('                 shift, and go to state 73
    '&'                 shift, and go to state 74

    expression  go to state 111
    value       go to state 76


State 81

   19 atrib: '+' '+' . SYMBOL_IDENTIFIER

    SYMBOL_IDENTIFIER  shift, and go to state 112


State 82

   10 command_list: '{' commands '}' .

    $default  reduce using rule 10 (command_list)


State 83

   12 commands: simple_command ';' . commands

    KW_IF              shift, and go to state 54
    KW_LOOP            shift, and go to state 55
    KW_INPUT           shift, and go to state 56
    KW_RETURN          shift, and go to state 57
    KW_OUTPUT          shift, and go to state 58
    SYMBOL_IDENTIFIER  shift, and go to state 59
    '+'                shift, and go to state 60

    ';'       reduce using rule 13 (simple_command)
    $default  reduce using rule 11 (commands)

    commands        go to state 113
    simple_command  go to state 62
    atrib           go to state 63
    flux_control    go to state 64


State 84

   64 local_var_def: type SYMBOL_IDENTIFIER ':' value . ';'

    ';'  shift, and go to state 114


State 85

   65 local_var_def: type '$' SYMBOL_IDENTIFIER ':' . value ';'

    SYMBOL_LIT_INTEGER  shift, and go to state 16
    SYMBOL_LIT_TRUE     shift, and go to state 17
    SYMBOL_LIT_FALSE    shift, and go to state 18
    SYMBOL_LIT_CHAR     shift, and go to state 19
    SYMBOL_LIT_STRING   shift, and go to state 20

    value  go to state 115


State 86

   69 paramseq: ',' type SYMBOL_IDENTIFIER paramseq .

    $default  reduce using rule 69 (paramseq)


State 87

   24 expression: expression . op expression
   55 flux_control: KW_IF '(' expression . ')' then

    OPERATOR_LE   shift, and go to state 94
    OPERATOR_GE   shift, and go to state 95
    OPERATOR_EQ   shift, and go to state 96
    OPERATOR_NE   shift, and go to state 97
    OPERATOR_AND  shift, and go to state 98
    OPERATOR_OR   shift, and go to state 99
    '+'           shift, and go to state 100
    '-'           shift, and go to state 101
    '/'           shift, and go to state 102
    '*'           shift, and go to state 103
    ')'           shift, and go to state 116
    '>'           shift, and go to state 104
    '<'           shift, and go to state 105

    op  go to state 106


State 88

   56 flux_control: KW_LOOP '(' simple_command . ';' expression ';' simple_command ')' command_list

    ';'  shift, and go to state 117


State 89

   25 expression: SYMBOL_IDENTIFIER '[' . expression ']'

    SYMBOL_LIT_INTEGER  shift, and go to state 16
    SYMBOL_LIT_TRUE     shift, and go to state 17
    SYMBOL_LIT_FALSE    shift, and go to state 18
    SYMBOL_LIT_CHAR     shift, and go to state 19
    SYMBOL_LIT_STRING   shift, and go to state 20
    SYMBOL_IDENTIFIER   shift, and go to state 71
    '$'                 shift, and go to state 72
    '('                 shift, and go to state 73
    '&'                 shift, and go to state 74

    expression  go to state 118
    value       go to state 76


State 90

   28 expression: SYMBOL_IDENTIFIER '(' . arg ')'

    SYMBOL_LIT_INTEGER  shift, and go to state 16
    SYMBOL_LIT_TRUE     shift, and go to state 17
    SYMBOL_LIT_FALSE    shift, and go to state 18
    SYMBOL_LIT_CHAR     shift, and go to state 19
    SYMBOL_LIT_STRING   shift, and go to state 20
    SYMBOL_IDENTIFIER   shift, and go to state 119

    $default  reduce using rule 43 (arg)

    arg    go to state 120
    value  go to state 121


State 91

   30 expression: '$' SYMBOL_IDENTIFIER .

    $default  reduce using rule 30 (expression)


State 92

   23 expression: '(' expression . ')'
   24           | expression . op expression

    OPERATOR_LE   shift, and go to state 94
    OPERATOR_GE   shift, and go to state 95
    OPERATOR_EQ   shift, and go to state 96
    OPERATOR_NE   shift, and go to state 97
    OPERATOR_AND  shift, and go to state 98
    OPERATOR_OR   shift, and go to state 99
    '+'           shift, and go to state 100
    '-'           shift, and go to state 101
    '/'           shift, and go to state 102
    '*'           shift, and go to state 103
    ')'           shift, and go to state 122
    '>'           shift, and go to state 104
    '<'           shift, and go to state 105

    op  go to state 106


State 93

   29 expression: '&' SYMBOL_IDENTIFIER .

    $default  reduce using rule 29 (expression)


State 94

   39 op: OPERATOR_LE .

    $default  reduce using rule 39 (op)


State 95

   38 op: OPERATOR_GE .

    $default  reduce using rule 38 (op)


State 96

   37 op: OPERATOR_EQ .

    $default  reduce using rule 37 (op)


State 97

   42 op: OPERATOR_NE .

    $default  reduce using rule 42 (op)


State 98

   41 op: OPERATOR_AND .

    $default  reduce using rule 41 (op)


State 99

   40 op: OPERATOR_OR .

    $default  reduce using rule 40 (op)


State 100

   31 op: '+' .

    $default  reduce using rule 31 (op)


State 101

   32 op: '-' .

    $default  reduce using rule 32 (op)


State 102

   34 op: '/' .

    $default  reduce using rule 34 (op)


State 103

   33 op: '*' .

    $default  reduce using rule 33 (op)


State 104

   35 op: '>' .

    $default  reduce using rule 35 (op)


State 105

   36 op: '<' .

    $default  reduce using rule 36 (op)


State 106

   24 expression: expression op . expression

    SYMBOL_LIT_INTEGER  shift, and go to state 16
    SYMBOL_LIT_TRUE     shift, and go to state 17
    SYMBOL_LIT_FALSE    shift, and go to state 18
    SYMBOL_LIT_CHAR     shift, and go to state 19
    SYMBOL_LIT_STRING   shift, and go to state 20
    SYMBOL_IDENTIFIER   shift, and go to state 71
    '$'                 shift, and go to state 72
    '('                 shift, and go to state 73
    '&'                 shift, and go to state 74

    expression  go to state 123
    value       go to state 76


State 107

   54 output_rest: ',' . expression output_rest

    SYMBOL_LIT_INTEGER  shift, and go to state 16
    SYMBOL_LIT_TRUE     shift, and go to state 17
    SYMBOL_LIT_FALSE    shift, and go to state 18
    SYMBOL_LIT_CHAR     shift, and go to state 19
    SYMBOL_LIT_STRING   shift, and go to state 20
    SYMBOL_IDENTIFIER   shift, and go to state 71
    '$'                 shift, and go to state 72
    '('                 shift, and go to state 73
    '&'                 shift, and go to state 74

    expression  go to state 124
    value       go to state 76


State 108

   17 simple_command: KW_OUTPUT expression output_rest .

    $default  reduce using rule 17 (simple_command)


State 109

   20 atrib: SYMBOL_IDENTIFIER '+' '+' .

    $default  reduce using rule 20 (atrib)


State 110

   22 atrib: SYMBOL_IDENTIFIER '[' expression . ']' '=' expression
   24 expression: expression . op expression

    OPERATOR_LE   shift, and go to state 94
    OPERATOR_GE   shift, and go to state 95
    OPERATOR_EQ   shift, and go to state 96
    OPERATOR_NE   shift, and go to state 97
    OPERATOR_AND  shift, and go to state 98
    OPERATOR_OR   shift, and go to state 99
    '+'           shift, and go to state 100
    '-'           shift, and go to state 101
    '/'           shift, and go to state 102
    '*'           shift, and go to state 103
    ']'           shift, and go to state 125
    '>'           shift, and go to state 104
    '<'           shift, and go to state 105

    op  go to state 106


State 111

   21 atrib: SYMBOL_IDENTIFIER '=' expression .
   24 expression: expression . op expression

    OPERATOR_LE   shift, and go to state 94
    OPERATOR_GE   shift, and go to state 95
    OPERATOR_EQ   shift, and go to state 96
    OPERATOR_NE   shift, and go to state 97
    OPERATOR_AND  shift, and go to state 98
    OPERATOR_OR   shift, and go to state 99
    '+'           shift, and go to state 100
    '-'           shift, and go to state 101
    '/'           shift, and go to state 102
    '*'           shift, and go to state 103
    '>'           shift, and go to state 104
    '<'           shift, and go to state 105

    $default  reduce using rule 21 (atrib)

    op  go to state 106


State 112

   19 atrib: '+' '+' SYMBOL_IDENTIFIER .

    $default  reduce using rule 19 (atrib)


State 113

   12 commands: simple_command ';' commands .

    $default  reduce using rule 12 (commands)


State 114

   64 local_var_def: type SYMBOL_IDENTIFIER ':' value ';' .

    $default  reduce using rule 64 (local_var_def)


State 115

   65 local_var_def: type '$' SYMBOL_IDENTIFIER ':' value . ';'

    ';'  shift, and go to state 126


State 116

   55 flux_control: KW_IF '(' expression ')' . then

    KW_THEN  shift, and go to state 127

    then  go to state 128


State 117

   56 flux_control: KW_LOOP '(' simple_command ';' . expression ';' simple_command ')' command_list

    SYMBOL_LIT_INTEGER  shift, and go to state 16
    SYMBOL_LIT_TRUE     shift, and go to state 17
    SYMBOL_LIT_FALSE    shift, and go to state 18
    SYMBOL_LIT_CHAR     shift, and go to state 19
    SYMBOL_LIT_STRING   shift, and go to state 20
    SYMBOL_IDENTIFIER   shift, and go to state 71
    '$'                 shift, and go to state 72
    '('                 shift, and go to state 73
    '&'                 shift, and go to state 74

    expression  go to state 129
    value       go to state 76


State 118

   24 expression: expression . op expression
   25           | SYMBOL_IDENTIFIER '[' expression . ']'

    OPERATOR_LE   shift, and go to state 94
    OPERATOR_GE   shift, and go to state 95
    OPERATOR_EQ   shift, and go to state 96
    OPERATOR_NE   shift, and go to state 97
    OPERATOR_AND  shift, and go to state 98
    OPERATOR_OR   shift, and go to state 99
    '+'           shift, and go to state 100
    '-'           shift, and go to state 101
    '/'           shift, and go to state 102
    '*'           shift, and go to state 103
    ']'           shift, and go to state 130
    '>'           shift, and go to state 104
    '<'           shift, and go to state 105

    op  go to state 106


State 119

   45 arg: SYMBOL_IDENTIFIER . ',' arg
   46    | SYMBOL_IDENTIFIER .

    ','  shift, and go to state 131

    $default  reduce using rule 46 (arg)


State 120

   28 expression: SYMBOL_IDENTIFIER '(' arg . ')'

    ')'  shift, and go to state 132


State 121

   44 arg: value . ',' arg
   47    | value .

    ','  shift, and go to state 133

    $default  reduce using rule 47 (arg)


State 122

   23 expression: '(' expression ')' .

    $default  reduce using rule 23 (expression)


State 123

   24 expression: expression . op expression
   24           | expression op expression .

    OPERATOR_LE   shift, and go to state 94
    OPERATOR_GE   shift, and go to state 95
    OPERATOR_EQ   shift, and go to state 96
    OPERATOR_NE   shift, and go to state 97
    OPERATOR_AND  shift, and go to state 98
    OPERATOR_OR   shift, and go to state 99
    '+'           shift, and go to state 100
    '-'           shift, and go to state 101
    '/'           shift, and go to state 102
    '*'           shift, and go to state 103
    '>'           shift, and go to state 104
    '<'           shift, and go to state 105

    OPERATOR_LE   [reduce using rule 24 (expression)]
    OPERATOR_GE   [reduce using rule 24 (expression)]
    OPERATOR_EQ   [reduce using rule 24 (expression)]
    OPERATOR_NE   [reduce using rule 24 (expression)]
    OPERATOR_AND  [reduce using rule 24 (expression)]
    OPERATOR_OR   [reduce using rule 24 (expression)]
    '+'           [reduce using rule 24 (expression)]
    '-'           [reduce using rule 24 (expression)]
    '/'           [reduce using rule 24 (expression)]
    '*'           [reduce using rule 24 (expression)]
    '>'           [reduce using rule 24 (expression)]
    '<'           [reduce using rule 24 (expression)]
    $default      reduce using rule 24 (expression)

    op  go to state 106


State 124

   24 expression: expression . op expression
   54 output_rest: ',' expression . output_rest

    OPERATOR_LE   shift, and go to state 94
    OPERATOR_GE   shift, and go to state 95
    OPERATOR_EQ   shift, and go to state 96
    OPERATOR_NE   shift, and go to state 97
    OPERATOR_AND  shift, and go to state 98
    OPERATOR_OR   shift, and go to state 99
    '+'           shift, and go to state 100
    '-'           shift, and go to state 101
    '/'           shift, and go to state 102
    '*'           shift, and go to state 103
    '>'           shift, and go to state 104
    '<'           shift, and go to state 105
    ','           shift, and go to state 107

    $default  reduce using rule 53 (output_rest)

    op           go to state 106
    output_rest  go to state 134


State 125

   22 atrib: SYMBOL_IDENTIFIER '[' expression ']' . '=' expression

    '='  shift, and go to state 135


State 126

   65 local_var_def: type '$' SYMBOL_IDENTIFIER ':' value ';' .

    $default  reduce using rule 65 (local_var_def)


State 127

   57 then: KW_THEN . option else

    KW_IF              shift, and go to state 54
    KW_LOOP            shift, and go to state 55
    KW_INPUT           shift, and go to state 56
    KW_RETURN          shift, and go to state 57
    KW_OUTPUT          shift, and go to state 58
    SYMBOL_IDENTIFIER  shift, and go to state 59
    '+'                shift, and go to state 60
    '{'                shift, and go to state 45

    $default  reduce using rule 13 (simple_command)

    command_list    go to state 136
    simple_command  go to state 137
    atrib           go to state 63
    flux_control    go to state 64
    option          go to state 138


State 128

   55 flux_control: KW_IF '(' expression ')' then .

    $default  reduce using rule 55 (flux_control)


State 129

   24 expression: expression . op expression
   56 flux_control: KW_LOOP '(' simple_command ';' expression . ';' simple_command ')' command_list

    OPERATOR_LE   shift, and go to state 94
    OPERATOR_GE   shift, and go to state 95
    OPERATOR_EQ   shift, and go to state 96
    OPERATOR_NE   shift, and go to state 97
    OPERATOR_AND  shift, and go to state 98
    OPERATOR_OR   shift, and go to state 99
    '+'           shift, and go to state 100
    '-'           shift, and go to state 101
    '/'           shift, and go to state 102
    '*'           shift, and go to state 103
    ';'           shift, and go to state 139
    '>'           shift, and go to state 104
    '<'           shift, and go to state 105

    op  go to state 106


State 130

   25 expression: SYMBOL_IDENTIFIER '[' expression ']' .

    $default  reduce using rule 25 (expression)


State 131

   45 arg: SYMBOL_IDENTIFIER ',' . arg

    SYMBOL_LIT_INTEGER  shift, and go to state 16
    SYMBOL_LIT_TRUE     shift, and go to state 17
    SYMBOL_LIT_FALSE    shift, and go to state 18
    SYMBOL_LIT_CHAR     shift, and go to state 19
    SYMBOL_LIT_STRING   shift, and go to state 20
    SYMBOL_IDENTIFIER   shift, and go to state 119

    $default  reduce using rule 43 (arg)

    arg    go to state 140
    value  go to state 121


State 132

   28 expression: SYMBOL_IDENTIFIER '(' arg ')' .

    $default  reduce using rule 28 (expression)


State 133

   44 arg: value ',' . arg

    SYMBOL_LIT_INTEGER  shift, and go to state 16
    SYMBOL_LIT_TRUE     shift, and go to state 17
    SYMBOL_LIT_FALSE    shift, and go to state 18
    SYMBOL_LIT_CHAR     shift, and go to state 19
    SYMBOL_LIT_STRING   shift, and go to state 20
    SYMBOL_IDENTIFIER   shift, and go to state 119

    $default  reduce using rule 43 (arg)

    arg    go to state 141
    value  go to state 121


State 134

   54 output_rest: ',' expression output_rest .

    $default  reduce using rule 54 (output_rest)


State 135

   22 atrib: SYMBOL_IDENTIFIER '[' expression ']' '=' . expression

    SYMBOL_LIT_INTEGER  shift, and go to state 16
    SYMBOL_LIT_TRUE     shift, and go to state 17
    SYMBOL_LIT_FALSE    shift, and go to state 18
    SYMBOL_LIT_CHAR     shift, and go to state 19
    SYMBOL_LIT_STRING   shift, and go to state 20
    SYMBOL_IDENTIFIER   shift, and go to state 71
    '$'                 shift, and go to state 72
    '('                 shift, and go to state 73
    '&'                 shift, and go to state 74

    expression  go to state 142
    value       go to state 76


State 136

   60 option: command_list .

    $default  reduce using rule 60 (option)


State 137

   61 option: simple_command .

    $default  reduce using rule 61 (option)


State 138

   57 then: KW_THEN option . else

    KW_ELSE  shift, and go to state 143

    KW_ELSE   [reduce using rule 58 (else)]
    $default  reduce using rule 58 (else)

    else  go to state 144


State 139

   56 flux_control: KW_LOOP '(' simple_command ';' expression ';' . simple_command ')' command_list

    KW_IF              shift, and go to state 54
    KW_LOOP            shift, and go to state 55
    KW_INPUT           shift, and go to state 56
    KW_RETURN          shift, and go to state 57
    KW_OUTPUT          shift, and go to state 58
    SYMBOL_IDENTIFIER  shift, and go to state 59
    '+'                shift, and go to state 60

    $default  reduce using rule 13 (simple_command)

    simple_command  go to state 145
    atrib           go to state 63
    flux_control    go to state 64


State 140

   45 arg: SYMBOL_IDENTIFIER ',' arg .

    $default  reduce using rule 45 (arg)


State 141

   44 arg: value ',' arg .

    $default  reduce using rule 44 (arg)


State 142

   22 atrib: SYMBOL_IDENTIFIER '[' expression ']' '=' expression .
   24 expression: expression . op expression

    OPERATOR_LE   shift, and go to state 94
    OPERATOR_GE   shift, and go to state 95
    OPERATOR_EQ   shift, and go to state 96
    OPERATOR_NE   shift, and go to state 97
    OPERATOR_AND  shift, and go to state 98
    OPERATOR_OR   shift, and go to state 99
    '+'           shift, and go to state 100
    '-'           shift, and go to state 101
    '/'           shift, and go to state 102
    '*'           shift, and go to state 103
    '>'           shift, and go to state 104
    '<'           shift, and go to state 105

    $default  reduce using rule 22 (atrib)

    op  go to state 106


State 143

   59 else: KW_ELSE . option

    KW_IF              shift, and go to state 54
    KW_LOOP            shift, and go to state 55
    KW_INPUT           shift, and go to state 56
    KW_RETURN          shift, and go to state 57
    KW_OUTPUT          shift, and go to state 58
    SYMBOL_IDENTIFIER  shift, and go to state 59
    '+'                shift, and go to state 60
    '{'                shift, and go to state 45

    $default  reduce using rule 13 (simple_command)

    command_list    go to state 136
    simple_command  go to state 137
    atrib           go to state 63
    flux_control    go to state 64
    option          go to state 146


State 144

   57 then: KW_THEN option else .

    $default  reduce using rule 57 (then)


State 145

   56 flux_control: KW_LOOP '(' simple_command ';' expression ';' simple_command . ')' command_list

    ')'  shift, and go to state 147


State 146

   59 else: KW_ELSE option .

    $default  reduce using rule 59 (else)


State 147

   56 flux_control: KW_LOOP '(' simple_command ';' expression ';' simple_command ')' . command_list

    '{'  shift, and go to state 45

    command_list  go to state 148


State 148

   56 flux_control: KW_LOOP '(' simple_command ';' expression ';' simple_command ')' command_list .

    $default  reduce using rule 56 (flux_control)
